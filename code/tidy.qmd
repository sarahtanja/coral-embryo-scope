---
title: "Make tidy dataframes"
subtitle: "with `tidyverse`"
date: 04/01/2024
date-modified: today
format:
  gfm: 
    toc: true
    number-sections: true
  html:
    theme: journal
    highlight-style: github
    page-layout: full
    code-background: true
    code-tools: 
      source: true
      toggle: true
    toc: true
    toc-depth: 2
    toc-location: left
    number-sections: true
    df-print: kable
    smooth-scroll: true
    link-external-icon: true
    link-external-newwindow: true
    reference-location: margin
    citation-location: margin
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE,         # Display code chunks
  eval = FALSE,        # Evaluate code chunks
  warning = FALSE,     # Hide warnings
  message = FALSE,     # Hide messages
  comment = ""         # Prevents appending '##' to beginning of lines in code output
)
```

# Background
Each sample (aka each microscopy slide) resulted in a total embryo count.
 
For each sample, each embryo counted was classified by:
- stage
- status

## Input
- each sample's own annotation .csv found in `data/scope_annotation_data`
## Output
- `data/output/tidy_bros` each row is an embryo
- `data/output/tidy_vials` each row is a sample

# Install & load packages
```{r}
library(tidyverse)
```

# tidy_bros : each row is an embryo
There should be 120 csv files, representing each sample, named by the convention of: 
- 10 'crosses' of somewhat random parentage **(1-10)**
- 4 'treatments' encompassing a control, low, mid, and high pvc leachate exposure **(C, L, M, H)**
- 3 'embryonic stages' or hours post-fertilization **(4, 9, 14)**

The columns for each file are:
- sample_name = col_character()
- embryo_no = col_integer()
- embryo_phase = col_factor()
- status = col_factor
- notes = col_factor
::: callout-note
`list.files()` finds all .csv files in the directory.
`map_dfr(read_csv)` reads each file and binds rows together (\_dfr = data frame row-bind).
:::
```{r}
# list all csv files
csv <- list.files("../data/scope_annotation_data", pattern = "\\.csv$", full.names = TRUE)

# Combine all csv's into one tidy df and keep sheet name as row name
tidy_embryos <- csv %>% 
    map_dfr(~ read_csv(.x, col_types = 
                         cols(sample_name = col_character()))) 

# Change sample_name column to sample_id to match metadata column name  
tidy_embryos <- tidy_embryos %>% 
  mutate(sample_id = sample_name,
         stage = embryo_phase) %>%
  select(sample_id, stage, status) 
  

summary(tidy_embryos)
unique(tidy_embryos$stage)
unique(tidy_embryos$status)
```


## Add metadata

```{r}
metadata <- read_csv("../data/metadata/scope-metadata.csv")
```

```{r}
metadata_clean <- metadata %>%
  mutate(date = as.Date(date, format = "%d/%m/%Y")) %>%
  select(
    sample_id,
    parent_1 = parent_colony_a,
    parent_2 = parent_colony_b,
    treatment = leachate,
    hpf,
    date
  )

tidy_embryos <- tidy_embryos %>%
  left_join(metadata_clean, by = "sample_id")

str(tidy_embryos)
```

## Collapse to morula

```{r}
tidy_bros <- tidy_embryos %>% 
  mutate(stage = if_else(stage %in% c("4to16cell", "32to64cell"), "morula", stage))

unique(tidy_bros$stage)
```

## Order factors

```{r}
# Set your levels in order
# embryo_phase
bro_levels <- c("egg", "cleavage", "morula", "prawnchip", "earlygastrula")

# treatment
treat_levels <- c("control", "low", "mid", "high")

# status
status_levels <- c("typical", "uncertain", "malformed")


# Mutate dataframe to set factor levels
tidy_bros <- tidy_bros %>%
  mutate(stage = factor(stage, 
                        levels = bro_levels,
                        ordered = TRUE),
         treatment = factor(treatment, 
                            levels = treat_levels,
                            ordered = TRUE),
         status = factor(status, 
                         levels = status_levels,
                         ordered = TRUE))

str(tidy_bros)
```

What colony crosses were used in spawning for microscopy?

```{r}
tidy_bros %>% distinct(parent_1, parent_2)
```

## QAQC zeros & NAs

Which samples had ZERO embryos to count?

```{r}
tidy_bros %>% 
  filter(if_any(everything(), is.na))
```

::: callout-warning
Here we have 9 samples that will need some attention... they did not contain any (0) viable embryos... only disintegrating embryos or embryo debris. How do we handle these zeros? How do we count a 'zero'? Of note cross 2 (from the rack corals; 30-Orange (O) and 1-White (W) ) had no fertilization and it should be removed entirely from the analysis. Note that at 4 hpf cross 2 eggs had not yet dissolved despite having zero fertilization! This is good evidence that the unfertilized eggs are still visible at 4 hpf.
:::

## Drop cross 2
Filter out (that is exclude) cross 2

```{r}
tidy_bros <- tidy_bros %>% 
  filter(!grepl("2", sample_id))
```

There should now be no `NAs` in `status` except for samples 3L9 & 7H9.. which had zero viable embryos! **...But what do we do with that?**
```{r}
tidy_bros %>% 
  filter(if_any(everything(), is.na))
```
![Sample 3L9 only contained two dissolving debris fragments](../images/3L9/3L9_4xstitch_anno.jpg)
![Sample 7H9 contained many dissolving debris fragments, but none appearing viable](../images/7H9/7H9_manualstitch_anno.jpg)
## Save dataframe

```{r}
write_csv(tidy_bros, "../data/output/tidy_bros.csv")
```

# tidy_vials : each row is a sample

Counts and proportions of combined and distinct stage and status values in each vial
```{r}
# Count + proportion per group
vials <- tidy_bros %>%
  count(sample_id, stage, status, name = "n") %>%
  group_by(sample_id) %>%
  mutate(prop = n / sum(n)) %>%
  ungroup() %>%
  pivot_wider(
    names_from = c(stage, status),
    values_from = c(n, prop),
    values_fill = 0
  ) %>% 
  select(!matches("NA"))%>%
  left_join(metadata_clean, by = "sample_id")

str(vials)

```

```{r}
tidy_vials <- tidy_bros %>%
  group_by(sample_id) %>%
  summarise(
    n_embryos = n(),
    n_typical = sum(status == "typical"),
    n_malformed = sum(status == "malformed"),
    n_uncertain = sum(status == "uncertain"),
    prop_typical = mean(status == "typical"),
    prop_malformed = mean(status == "malformed"),
    prop_uncertain = mean(status == "uncertain"),
    n_egg = sum(stage == "egg"),
    prop_egg = mean(stage == "egg"),
    n_cleavage = sum(stage == "cleavage"),
    prop_cleavage = mean(stage == "cleavage"),
    n_morula = sum(stage == "morula"),
    prop_morula = mean(stage == "morula"),
    n_prawnchip = sum(stage == "prawnchip"),
    prop_prawnchip = mean(stage == "prawnchip"),
    n_earlygastrula = sum(stage == "earlygastrula"),
    prop_earlygastrula = mean(stage == "earlygastrula"),
    .groups = "drop"
  )

str(tidy_vials)
```

```{r}
tidy_vials <- tidy_vials %>% 
  left_join(vials, by = "sample_id") %>% 
  relocate(c(treatment, hpf, parent_1, parent_2, date), .after = sample_id)
```
## make a column for viable embryo counts

This means malformed = dead, uncertain(torn) = viable. 
Ecologically, a malformed embryo isn't progressing.. but a torn embryo could continue to develop!

So we're only counting the total number of embryos that are typical or uncertain. To do that let's make new columns called n_viable and prop_viable for the number of viable embryos and proportion of viable embryos.

```{r}
tidy_vials <- tidy_vials %>%
  mutate(
    n_viable = case_when(
      hpf == 4 ~ n_embryos - (n_egg_malformed + 
                              n_cleavage_malformed + 
                              n_morula_malformed +
                              n_prawnchip_malformed +
                              n_earlygastrula_malformed),
      hpf %in% c(9, 14) ~ n_embryos - (n_egg + 
                                        n_egg_malformed + 
                                        n_cleavage_malformed + 
                                        n_morula_malformed +
                                        n_prawnchip_malformed +
                                        n_earlygastrula_malformed)
    )
  ) %>%
  relocate(n_viable, .before = n_embryos) %>%
  mutate(prop_viable = n_viable / n_embryos) %>%
  relocate(prop_viable, .before = n_embryos)
```

## QAQC zeros & NAs
```{r}
tidy_vials %>% 
  filter(if_any(everything(), is.na))
```

3L9 had zero embryos & 7H9 had zero embryos
These samples show '1' embryo, but the row was just a placeholder and really there were no viable embryos found in these sample (see above). Here we simply replace the '1' with a '0' and all the NA values in the columns with '0'. 

```{r}
tidy_vials <- tidy_vials %>%
  mutate(across(
    c(n_viable, prop_viable, n_embryos),
    ~if_else(sample_id %in% c("3L9", "7H9"), 0, .)
  ))
```

Should no longer be NA... n_viable and prop_viable and n_embryos should be 0
```{r}
tidy_vials %>% 
  filter(sample_id == c("3L9", "7H9"))
```

## Order factors
Sometimes for plotting purposes we need hpf to be ordered as a factor and not a numerical data
```{r}
tidy_vials <- tidy_vials %>% 
  mutate(hpf = factor(hpf, levels = c("4","9","14"), ordered = TRUE ),
         treatment = factor(treatment, levels = c("control", "low", "mid", "high"), ordered = TRUE),
         )
```

## Save dataframe
```{r}
write_csv(tidy_vials, "../data/output/tidy_vials.csv")
```

# Summary & Next Steps

Ok! We have two tidy dataframes in long format to work with that should allow us to answer all our questions.


The following are thought-experiment dataframes... not fully flushed out yet

## embryos_summary : 
```{r}
# Count embryos per (sample_id, stage, status)
embryos_summary <- tidy_bros %>%
  count(sample_id, stage, status, name = "n_embryos") %>%
  group_by(sample_id) %>%
  mutate(proportion = n_embryos / sum(n_embryos)) %>%
  ungroup()

```

## stage_totals :
```{r}
# Total counts per stage per sample_id
stage_totals <- tidy_bros %>%
  count(sample_id, stage, name = "total_n")
```